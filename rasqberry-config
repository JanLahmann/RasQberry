#!/bin/sh
# Derived from raspi-config https://github.com/RPi-Distro/raspi-config
#

INTERACTIVE=True
ASK_TO_REBOOT=0
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
CONFIG=/boot/config.txt

USER=${SUDO_USER:-$(who -m | awk '{ print $1 }')}

is_pi () {
  ARCH=$(dpkg --print-architecture)
  if [ "$ARCH" = "armhf" ] || [ "$ARCH" = "arm64" ] ; then
    return 0
  else
    return 1
  fi
}

if is_pi ; then
  CMDLINE=/boot/cmdline.txt
else
  CMDLINE=/proc/cmdline
fi

is_pione() {
   if grep -q "^Revision\s*:\s*00[0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo; then
      return 0
   elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[0-36][0-9a-fA-F]$" /proc/cpuinfo ; then
      return 0
   else
      return 1
   fi
}

is_pitwo() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]04[0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

is_pizero() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[9cC][0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

is_pifour() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]11[0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

get_pi_type() {
   if is_pione; then
      echo 1
   elif is_pitwo; then
      echo 2
   else
      echo 0
   fi
}

is_live() {
    grep -q "boot=live" $CMDLINE
    return $?
}

is_ssh() {
  if pstree -p | egrep --quiet --extended-regexp ".*sshd.*\($$\)"; then
    return 0
  else
    return 1
  fi
}

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=18
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
  whiptail --msgbox "\
This tool provides a straight-forward way of doing initial
configuration of the Raspberry Pi. Although it can be run
at any time, some of the options may have difficulties if
you have heavily customised your installation.\
" 20 70 1
}

is_number() {
  case $1 in
    ''|*[!0-9]*) return 0 ;;
    *) return 1 ;;
  esac
}

disable_raspi_config_at_boot() {
  if [ -e /etc/profile.d/raspi-config.sh ]; then
    rm -f /etc/profile.d/raspi-config.sh
    if [ -e /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf ]; then
      rm /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf
    fi
    telinit q
  fi
}

do_finish() {
  disable_raspi_config_at_boot
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}


#
# Command line options for non-interactive use
#
for i in $*
do
  case $i in
  --memory-split)
    OPT_MEMORY_SPLIT=GET
    printf "Not currently supported\n"
    exit 1
    ;;
  --memory-split=*)
    OPT_MEMORY_SPLIT=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
    printf "Not currently supported\n"
    exit 1
    ;;
  --expand-rootfs)
    INTERACTIVE=False
    do_expand_rootfs
    printf "Please reboot\n"
    exit 0
    ;;
  --apply-os-config)
    INTERACTIVE=False
    do_apply_os_config
    exit $?
    ;;
  nonint)
    INTERACTIVE=False
    "$@"
    exit $?
    ;;
  *)
    # unknown option
    ;;
  esac
done

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo rasqberry-config'\n"
  exit 1
fi

if [ -n "${OPT_MEMORY_SPLIT:-}" ]; then
  set -e # Fail when a command errors
  set_memory_split "${OPT_MEMORY_SPLIT}"
  exit 0
fi


############# RasQberry  #############

do_rasqberry_about() {
  whiptail --msgbox "\
This tool provides a straight-forward way of doing initial
installation and configuration of the RasQberry system. \
" 20 70 1
}

do_rasqberry_update() {
  sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=1024/' /etc/dphys-swapfile
  /etc/init.d/dphys-swapfile stop
  /etc/init.d/dphys-swapfile start
  apt update
  apt -y full-upgrade
  printf "\n\nplease exit rasqberry-config and REBOOT the system\n"
  sleep 2
  ASK_TO_REBOOT=1
}

do_rasqberry_clonegithub() {
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_clonegithub.sh
  sleep 2
}

do_rasqberry_install_libcint() {
  echo; echo "Install libcint"; echo;
  cd /home/pi/
  apt -y install cmake libatlas-base-dev p7zip-full
  if [ ! -f /usr/local/lib/libcint.so ]; then
    sudo -u pi -H -- sh -c 'git clone https://github.com/sunqm/libcint.git &&
      mkdir -p libcint/build && cd libcint/build &&
      cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/ .. '
    cd /home/pi/libcint/build && make install && cd /home/pi/
  fi
  sleep 10
}

do_rasqberry_install_019() {
  echo; echo "Install Qiskit 0.19"; echo;
  do_rasqberry_install_libcint;
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_install_Qiskit019.sh
  sleep 10
}

do_rasqberry_install_020() {
  echo; echo "Install Qiskit 0.20"; echo;
  do_rasqberry_install_libcint;
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_install_Qiskit020.sh
  sleep 10
}

do_rasqberry_config_demos(){
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_q_token.sh
  sleep 10
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_qrasp.sh
  sleep 10
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_rasptie.sh
  sleep 10
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_jupyter_conf.sh
  sleep 10
  apt -y install python3-sense-emu sense-emu-tools
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_sensehat.sh
  sleep 10
}

do_rasqberry_qiskit_tutorials(){
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_qiskit_tutorial.sh
  sleep 10
}

do_rasqberry_qtoken_update(){
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_qrasp_token.sh
  sleep 10
}

do_rasqberry_enable_touch4(){
  sudo -u pi -H -- sh -c /home/pi/.local/bin/rq_enable_touch.sh
}

do_rasqberry_menu() {
  FUN=$(whiptail --title "RasQberry Configuration Tool (rasqberry-config)" --menu "RasQberry setup and configuration" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "Q1 System Update" "Update the system and create swapfile" \
    "Q2 Qiskit 0.19" "Install Qiskit version 0.19" \
    "Q3 Qiskit 0.20" "Install Qiskit version 0.20" \
    "Q4 Config & Demos" "Configure Qiskit and install Quantum Demos" \
    "Q5 Bloch-Sphere" "Setup and Start the Bloch-Sphere Demo" \
    "Q6 Qiskit Tutorials" "Clone Qiskit Tutorials" \
    "Q7 Update Q Token" "Enter new IBM Quantum Experience Token" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      Q1\ *) do_rasqberry_update ;;
      Q2\ *) do_rasqberry_install_019 ;;
      Q3\ *) do_rasqberry_install_020 ;;
      Q4\ *) do_rasqberry_config_demos ;;
      Q6\ *) do_rasqberry_qiskit_tutorials ;;
      Q7\ *) do_rasqberry_qtoken_update ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

############# RasQberry  #############

#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  [ -e $CONFIG ] || touch $CONFIG
  calc_wt_size
  while [ "$USER" = "root" ] || [ -z "$USER" ]; do
    if ! USER=$(whiptail --inputbox "raspi-config could not determine the default user.\\n\\nWhat user should these settings apply to?" 20 60 pi 3>&1 1>&2 2>&3); then
      return 0
    fi
  done
  while true; do
    if is_pi ; then
      FUN=$(whiptail --title "RasQberry Configuration Tool (rasqberry-config)" --backtitle "$(cat /proc/device-tree/model)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "Q RasQberry" "RasQberry setup and configuration" \
        "1 Enable Display" "Enable 4'' Display (run twice to install and rotate)" \
        "2 Clone GitHub" "Clone the RasQberry GitHub repository" \
        "9 About rasqberry-config" "Information about this configuration tool" \
        3>&1 1>&2 2>&3)
    else
      FUN=$(whiptail --title "RasQberry Configuration Tool (rasqberry-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "9 About" "Information about this configuration tool" \
        3>&1 1>&2 2>&3)
    fi
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      if is_pi ; then
        case "$FUN" in
          Q\ *) do_rasqberry_menu ;;
          1\ *) do_rasqberry_enable_touch4 ;;
          2\ *) do_rasqberry_clonegithub ;;
          9\ *) do_rasqberry_about ;;
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
      else
        case "$FUN" in
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
      fi
    else
      exit 1
    fi
  done
fi
